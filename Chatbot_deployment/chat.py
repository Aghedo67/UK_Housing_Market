# -*- coding: utf-8 -*-
"""chat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jQZBACa10vKs8eoVb-f8V5BDX8uS6Tpt
"""

import streamlit as st
import pandas as pd
import pickle
import faiss
import numpy as np
from sentence_transformers import SentenceTransformer

# ======================================
# Load Data & Model
# ======================================
@st.cache_resource
def load_data_and_models():
    df = pd.read_csv("cleaned_Uk_Housing.csv", parse_dates=["Listing_Date"])
    with open("xgb_log_price_model.pkl", "rb") as f:
        xgb_model = pickle.load(f)

    # Convert rows to text
    def row_to_text(row):
        return (
            f"This property is located in city {row['Location_City']} "
            f"in district {row['Location_District']}. "
            f"It has {row['Square_Footage']} square feet, "
            f"{row['Bedrooms']} bedrooms and {row['Bathrooms']} bathrooms. "
            f"It was built in {row['Year_Built']} with a build quality rating of {row['Build_Quality_Rating']}. "
            f"The market trend index is {row['Market_Trend_Index']:.2f}. "
            f"The sale price is ¬£{row['Sale_Price_GBP']:.0f} and it stayed on the market for {row['Days_On_Market']} days. "
            f"The monthly revenue is ¬£{row['Revenue_GBP_Monthly']:.0f}."
        )

    documents = df.apply(row_to_text, axis=1).tolist()

    # Embeddings
    embedder = SentenceTransformer("all-MiniLM-L6-v2")
    embeddings = embedder.encode(documents, convert_to_numpy=True)
    embeddings = embeddings / np.linalg.norm(embeddings, axis=1, keepdims=True)

    # FAISS Index
    dimension = embeddings.shape[1]
    index = faiss.IndexFlatIP(dimension)
    index.add(embeddings)

    return df, xgb_model, embedder, index, documents


df, xgb_model, embedder, index, documents = load_data_and_models()

# Feature columns
feature_cols = [
    'Location_City', 'Location_District', 'Square_Footage',
    'Bedrooms', 'Bathrooms', 'Year_Built', 'Build_Quality_Rating',
    'Market_Trend_Index', 'Agent_Commission_Percentage',
    'Days_On_Market', 'Revenue_GBP_Monthly', 'Listing_Year',
    'Listing_Month', 'Days_Since_Listed', 'Property_Age',
    'Property_Type_FreqEnc', 'Transaction_Type_FreqEnc',
    'Revenue_Activity_FreqEnc'
]

# ======================================
# Retrieval function
# ======================================
def retrieve(query, k=3):
    query_emb = embedder.encode([query], convert_to_numpy=True)
    query_emb = query_emb / np.linalg.norm(query_emb, axis=1, keepdims=True)
    distances, indices = index.search(query_emb, k)
    results = [documents[i] for i in indices[0]]
    return results

# ======================================
# Prediction function
# ======================================
def predict_price(features_dict):
    input_df = pd.DataFrame([features_dict])
    input_df = input_df[feature_cols]
    log_pred = xgb_model.predict(input_df)[0]
    return np.exp(log_pred)

# ======================================
# Streamlit App
# ======================================
st.set_page_config(page_title="UK Housing Chatbot", layout="wide")
st.title("üè° UK Housing Chatbot")

st.sidebar.header("Choose Mode")
mode = st.sidebar.radio("Select:", ["Chat / Retrieval", "Price Prediction"])

if mode == "Chat / Retrieval":
    st.subheader("üîç Ask about properties")
    query = st.text_input("Enter your query:", placeholder="e.g., Show me 3-bedroom homes in district 45")
    if st.button("Search"):
        if query.strip():
            results = retrieve(query, k=3)
            st.write("### Top Results:")
            for r in results:
                st.markdown(f"- {r}")
        else:
            st.warning("Please enter a query.")

elif mode == "Price Prediction":
    st.subheader("üí∞ Predict Property Sale Price")

    # User inputs for property features
    input_data = {}
    for col in feature_cols:
        if col in ['Location_City', 'Location_District', 'Bedrooms', 'Bathrooms',
                   'Year_Built', 'Build_Quality_Rating', 'Days_On_Market',
                   'Listing_Year', 'Listing_Month', 'Days_Since_Listed', 'Property_Age']:
            input_data[col] = st.number_input(f"{col}", value=0, step=1)
        else:
            input_data[col] = st.number_input(f"{col}", value=0.0, step=0.1)

    if st.button("Predict Price"):
        price = predict_price(input_data)
        st.success(f"üí° Predicted Sale Price: ¬£{price:,.2f}")