# -*- coding: utf-8 -*-
"""New_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sevOUd1qxUSqVDdz3gYSxLiioWgjFx-v
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from xgboost import XGBRegressor

# --- Page config ---
st.set_page_config(page_title="XGBoost House Price Predictor", layout="wide")

# --- Title ---
st.title("üè† XGBoost House Price Prediction (Log Transformed)")

# --- Load data ---
@st.cache_data
def load_data():
    df = pd.read_csv("cleaned_Uk_Housing.csv")  # Replace with your dataset path
    return df

df = load_data()

# --- Preview ---
if st.checkbox("Show raw data"):
    st.write(df.head())

# --- Feature selection ---
X = df.drop(['Sale_Price_GBP', 'Log_Sale_Price', 'Listing_Date'], axis=1)
y_log = df['Log_Sale_Price']

# --- Split ---
X_train, X_test, y_train_log, y_test_log = train_test_split(X, y_log, test_size=0.2, random_state=42)

# --- Train XGBoost ---
xgb = XGBRegressor(
    n_estimators=100,
    learning_rate=0.1,
    max_depth=6,
    random_state=42,
    n_jobs=-1
)

xgb.fit(X_train, y_train_log)
y_pred_log = xgb.predict(X_test)

# --- Evaluation: log scale ---
st.subheader("üìâ Evaluation on Log Scale")

rmse_log = np.sqrt(mean_squared_error(y_test_log, y_pred_log))
r2_log = r2_score(y_test_log, y_pred_log)

st.write(f"**RMSE (log)**: {rmse_log:.4f}")
st.write(f"**R¬≤ (log)**: {r2_log:.4f}")

# --- Convert back to price scale ---
y_test_price = np.exp(y_test_log)
y_pred_price = np.exp(y_pred_log)

# --- Evaluation: price scale ---
st.subheader("üí∑ Evaluation on Actual Price Scale")

rmse_price = np.sqrt(mean_squared_error(y_test_price, y_pred_price))
r2_price = r2_score(y_test_price, y_pred_price)

st.write(f"**RMSE**: ¬£{rmse_price:,.2f}")
st.write(f"**R¬≤**: {r2_price:.4f}")

# --- Plot actual vs predicted ---
st.subheader("üìä Predicted vs Actual Sale Prices")

fig, ax = plt.subplots(figsize=(8, 6))
ax.scatter(y_test_price, y_pred_price, alpha=0.5, label="XGBoost Predictions")
ax.plot([y_test_price.min(), y_test_price.max()],
        [y_test_price.min(), y_test_price.max()], 'r--')
ax.set_xlabel("Actual Sale Price (¬£)")
ax.set_ylabel("Predicted Sale Price (¬£)")
ax.set_title("Predicted vs Actual")
ax.legend()
st.pyplot(fig)

