# -*- coding: utf-8 -*-
"""New_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sevOUd1qxUSqVDdz3gYSxLiioWgjFx-v
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib  # <-- Added

# Load data
@st.cache_data
def load_data():
    df = pd.read_csv("cleaned_Uk_Housing.csv")
    if 'Log_Sale_Price' not in df.columns:
        df['Log_Sale_Price'] = np.log(df['Sale_Price_GBP'])
    return df

df = load_data()

# --- Feature/Target split ---
X = df.drop(['Sale_Price_GBP', 'Log_Sale_Price', 'Listing_Date'], axis=1)
y = df['Log_Sale_Price']

# Load pre-trained model instead of training
xgb_model = joblib.load("xgb_log_price_model.pkl")  # <-- Loading the saved model

# Title
st.title("🏡 UK House Price Predictor with XGBoost")

st.markdown("""
This app predicts the **sale price of a house** using an XGBoost model trained on UK housing data.  
Fill in the property details below and click **Predict** to get an estimated price.
""")

# --- Create input form dynamically from feature names ---
st.sidebar.header("📋 Enter Property Details")

# Dynamic input UI based on X columns
user_input = {}
for col in X.columns:
    if pd.api.types.is_numeric_dtype(X[col]):
        min_val = float(X[col].min())
        max_val = float(X[col].max())
        mean_val = float(X[col].mean())
        user_input[col] = st.sidebar.slider(f"{col}", min_val, max_val, mean_val)
    else:
        options = sorted(X[col].unique())
        user_input[col] = st.sidebar.selectbox(f"{col}", options)

# Predict Button
if st.sidebar.button("🔮 Predict Price"):
    # Convert to DataFrame
    input_df = pd.DataFrame([user_input])
    
    # Predict log price
    log_pred = xgb_model.predict(input_df)[0]
    
    # Convert to actual price
    predicted_price = np.exp(log_pred)

    # Display result
    st.success(f"💷 **Predicted Sale Price**: £{predicted_price:,.2f}")
    st.caption(f"(Log price: {log_pred:.2f})")

    # Show input summary
    with st.expander("Show input summary"):
        st.write(input_df)

